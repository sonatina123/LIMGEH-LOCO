"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UltimateTextToImageComponent = void 0;
const react_1 = __importDefault(require("react"));
const UltimateTextToImage_1 = require("./UltimateTextToImage");
class UltimateTextToImageComponent extends react_1.default.Component {
    render() {
        const _a = this.props, { text, debug } = _a, options = __rest(_a, ["text", "debug"]);
        this.ultimateTextToImage = new UltimateTextToImage_1.UltimateTextToImage(text, options);
        this.ultimateTextToImage.render();
        const dataUrl = this.ultimateTextToImage.toDataUrl();
        const { width, height, renderedTime, measuredParagraph } = this.ultimateTextToImage;
        if (debug) {
            return react_1.default.createElement("span", null,
                react_1.default.createElement("img", { alt: "", src: dataUrl, width: width, height: height }),
                react_1.default.createElement("br", null),
                "size: ",
                width,
                "x",
                height,
                ", font size: ",
                measuredParagraph.fontSize,
                ", render time: ",
                Math.round(renderedTime * 100) / 100,
                "ms");
        }
        else {
            return react_1.default.createElement("img", { alt: "", src: dataUrl, width: width, height: height });
        }
    }
}
exports.UltimateTextToImageComponent = UltimateTextToImageComponent;
