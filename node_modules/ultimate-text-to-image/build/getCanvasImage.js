"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCanvasImage = void 0;
const canvas = __importStar(require("canvas"));
const simple_get_1 = require("simple-get");
const getCanvasImage = (options) => __awaiter(void 0, void 0, void 0, function* () {
    if (options.buffer) {
        const newBase64 = `data:image/jpg;base64,${options.buffer.toString("base64")}`;
        return yield canvas.loadImage(newBase64);
    }
    else if (options.arrayBuffer) {
        const newBase64 = `data:image/jpg;base64,${Buffer.from(options.arrayBuffer).toString("base64")}`;
        return yield canvas.loadImage(newBase64);
    }
    else if (options.url) {
        try {
            const buffer = yield new Promise((resolve, reject) => {
                simple_get_1.concat(options.url, (err, res, data) => {
                    if (err) {
                        return reject(err);
                    }
                    if (res.statusCode !== 200) {
                        return reject(new Error("Invalid Image"));
                    }
                    resolve(data);
                });
            });
            const newBase64 = `data:image/jpg;base64,${buffer.toString("base64")}`;
            return yield canvas.loadImage(newBase64);
        }
        catch (err) {
            // ignore error
        }
        yield new Promise(resolve => setTimeout(resolve, 1000));
    }
    else if (options.base64) {
        const base64 = options.base64;
        if (base64.indexOf("data:") === 0) {
            return yield canvas.loadImage(base64);
        }
        else {
            const newBase64 = `data:image/jpg;base64,${base64}`;
            return yield canvas.loadImage(newBase64);
        }
    }
    throw new Error("Invalid Image");
});
exports.getCanvasImage = getCanvasImage;
