"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerFont = void 0;
const canvas = __importStar(require("canvas"));
const crypto_1 = __importDefault(require("crypto"));
const registerFont = (filename, options) => {
    const family = (options === null || options === void 0 ? void 0 : options.family) || generateRandomString(16);
    const weight = typeof (options === null || options === void 0 ? void 0 : options.weight) === "boolean" ? (options.weight ? "bold" : undefined) : ((options === null || options === void 0 ? void 0 : options.weight) ? options.weight.toString() : undefined);
    const style = typeof (options === null || options === void 0 ? void 0 : options.style) === "boolean" ? (options.style ? "italic" : undefined) : ((options === null || options === void 0 ? void 0 : options.style) ? options.style : undefined);
    canvas.registerFont(filename, { family, weight, style });
};
exports.registerFont = registerFont;
function generateRandomString(length) {
    const value = crypto_1.default.randomBytes(Math.ceil(length / 2)).toString("hex");
    return value.substr(0, length);
}
